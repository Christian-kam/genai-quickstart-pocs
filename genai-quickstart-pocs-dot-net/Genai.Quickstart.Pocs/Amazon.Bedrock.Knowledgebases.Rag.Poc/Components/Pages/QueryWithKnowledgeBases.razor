@page "/query-with-kb-form"

@using System.Runtime.CompilerServices;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using System.Threading.Channels;
@using Amazon;
@using Amazon.Bedrock
@using Amazon.BedrockAgent
@using Amazon.BedrockAgent.Model
@using Amazon.BedrockAgentRuntime
@using Amazon.BedrockAgentRuntime.Model
@using Amazon.BedrockRuntime;
@using Amazon.BedrockRuntime.Model;
@using Amazon.Runtime.EventStreams;
@using Amazon.Util;
@using LangChain.Databases
@using LangChain.Databases.Sqlite
@using LangChain.Providers.Amazon.Bedrock.Predefined.Amazon;
@using LangChain.Retrievers;
@using LangChain.Chains.RetrievalQA;
@using MudBlazor;
@using LangChain.Providers.Amazon.Bedrock;
@using LangChain.DocumentLoaders;
@using LangChain.Splitters.Text;

@inject AmazonBedrockAgentClient agentClient
@inject AmazonBedrockAgentRuntimeClient agentRuntimeClient
@inject AmazonBedrockClient bedrockClient

@rendermode InteractiveServer

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Amazon Bedrock Langchain RAG POC</PageTitle>
<MudStack>

    <AntiforgeryToken />

    <EditForm Model="@Model" OnSubmit="Submit">
        <MudCard>
            <MudCardContent>                
                <MudSelect T="KnowledgeBaseModel" @bind-Value="knowledgeBaseModel" Label="Select Knowledge Base" ToStringFunc="@_selectConverter" AnchorOrigin="Origin.BottomCenter">
                    @if (knowledgeBaseModels != null)
                    {
                        @foreach (var item in knowledgeBaseModels)
                        {
                            knowledgeBaseModel ??= item;
                            <MudSelectItem Value="@item"   />
                        }
                    }
                </MudSelect>
                <MudTextField @bind-Value="Model!.Query"  Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" OnAdornmentClick="Submit" />

            </MudCardContent>
            
        </MudCard>
        <MudCard>
            <MudCardContent>
                <MudMarkdown Value="@outputText"  />
            </MudCardContent>
        </MudCard>
    </EditForm>
    
   
</MudStack>



@code {
    [SupplyParameterFromForm]
    public QueryModel? Model { get; set; }

    protected override void OnInitialized() => Model ??= new();
    private string outputText;
    const string KNOWLEDGE_BASE_ID = "CEIXPAB1CN";
    private List<KnowledgeBaseModel> knowledgeBaseModels;
    private KnowledgeBaseModel knowledgeBaseModel;

    readonly Func<KnowledgeBaseModel, string> _selectConverter = kb => string.Concat(kb?.KnowledgeBaseName, "-", kb?.KnowledgeBaseId);

    protected override async Task OnInitializedAsync()
    {
        var knowledgeBaseResponse = await agentClient.ListKnowledgeBasesAsync(new ListKnowledgeBasesRequest()
        {
            MaxResults = 25

        });

        knowledgeBaseModels = new List<KnowledgeBaseModel>();
        foreach (var item in knowledgeBaseResponse?.KnowledgeBaseSummaries)
        {
            knowledgeBaseModel = new KnowledgeBaseModel();
            knowledgeBaseModel.KnowledgeBaseName = item.Name;
            knowledgeBaseModel.KnowledgeBaseId = item.KnowledgeBaseId;
            knowledgeBaseModels.Add(knowledgeBaseModel);
        }
    }


    private async void Submit()
    {       
        var query = Model?.Query;
        string claudeModelId = "anthropic.claude-3-haiku-20240307-v1:0";

        if (!string.IsNullOrEmpty(query))
        {
            outputText = await InvokeClaudeAsync(query, claudeModelId);

        }

        StateHasChanged();

    }


    public  async Task<string> InvokeClaudeAsync(string query, string claudeModelId)
    {
        string generatedText = "";
        try
        {
            //agentClient = new AmazonBedrockAgentRuntimeClient(RegionEndpoint.USEast1);
            var request = new RetrieveAndGenerateRequest
                {
                    Input = new RetrieveAndGenerateInput { Text = query },
                    RetrieveAndGenerateConfiguration = new RetrieveAndGenerateConfiguration
                    {
                        Type = RetrieveAndGenerateType.KNOWLEDGE_BASE,
                        KnowledgeBaseConfiguration = new KnowledgeBaseRetrieveAndGenerateConfiguration
                        {
                            KnowledgeBaseId = knowledgeBaseModel.KnowledgeBaseId,
                            ModelArn = claudeModelId,
                            RetrievalConfiguration = new KnowledgeBaseRetrievalConfiguration
                            {
                                VectorSearchConfiguration = new KnowledgeBaseVectorSearchConfiguration
                                {
                                    OverrideSearchType = SearchType.HYBRID
                                }
                            }
                        }
                    }
                };
            var response = await agentRuntimeClient.RetrieveAndGenerateAsync(request);

            if (response.HttpStatusCode == System.Net.HttpStatusCode.OK)
            {
                var output = string.Empty;
                int count = 1; 
                foreach (var citation in response.Citations)
                {
                    output += citation.GeneratedResponsePart.TextResponsePart.Text;

                    foreach (var references in citation.RetrievedReferences)
                    {

                        output += "[(" + count + ")]" + "(" + references.Location.S3Location.Uri + ")";
                        count++;
                    }
                }

                return output;

            }
            else
            {
                Console.WriteLine("InvokeModelAsync failed with status code " + response.HttpStatusCode);
            }
        }
        catch (AmazonBedrockRuntimeException e)
        {
            Console.WriteLine(e.Message);
        }
        return generatedText;
    }



    public class QueryModel
    {
        public string? Query { get; set; }
    }

    public class KnowledgeBaseModel
    {
        public string KnowledgeBaseId { get; set; }
        public string KnowledgeBaseName { get; set; }
    }
}
